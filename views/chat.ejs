<!DOCTYPE html>
<html lang="en" dir="ltr">
  <head>
    <meta charset="utf-8">
    <title>Chat with Neuvillette</title>
    <link rel="icon" type="image/svg+xml" href="/public/assets/images/neuviicon.svg" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined:opsz,wght,FILL,GRAD@24,400,0,0" />
    <link rel="stylesheet" href = "/public/assets/chatstyle.css" type = "text/css">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet"
         integrity="sha384-1BmE4kWBq78iYhFldvKuhfTAU6auU8tT94WrHftjDbrCEXSU1oBoqyl2QvZ6jIW3" crossorigin="anonymous">
  </head>
  <body>
    <video muted autoplay loop id = "neuvid"><source src = "/public/assets/resources/neuvibg.mp4" type = "video/mp4"></video>
    <section class="top-nav">
    <nav class="navbar navbar-expand-lg navbar">
        <div class="container-fluid">
            <a class="navbar-brand" href="https://rubllc.me"> <img src = "/public/assets/resources/logo.png" height="50" width="50"></a>
        </div>
    </nav>
      <div>
        Neuvillette Bot
      </div>
      <input id="menu-toggle" type="checkbox" />
      <label class='menu-button-container' for="menu-toggle">
      <div class='menu-button'></div>
    </label>
      <ul class="menu">
        <li><span id="history-btn" class="material-symbols-outlined" >history</span></li>
        <li><span id="reset-btn" class="material-symbols-outlined">password</span></li>
        <li><span id="logout-btn" class="material-symbols-outlined">logout</span></li>
      </ul>
    </section>
    <div class="chat-container"></div>
    <div class="typing-container">
      <div class="typing-content">
        <div class="typing-textarea">
          <textarea id="chat-input" spellcheck="false" placeholder="What do you want to ask Neuvillette?" required></textarea>
          <span id="send-btn" class="material-symbols-outlined">send</span>
        </div>
        <div class="typing-controls">
      </div>
    </div>
  </body>

<script>


const chatInput = document.querySelector("#chat-input");
const sendButton = document.querySelector("#send-btn");
const chatContainer = document.querySelector(".chat-container");
const historybtn = document.querySelector("#history-btn");
const resetbtn = document.querySelector("#reset-btn");
const logoutbtn = document.querySelector("#logout-btn");

let userText = null;
let botText = null;
let uid = 'chat_history_'+'<%-uid%>';
let api_key = '<%-api_key%>';



const createChatElement = (content, className) => {
    const chatDiv = document.createElement("div");
    chatDiv.classList.add("chat", className);
    chatDiv.innerHTML = content;
    return chatDiv;
}

async function query(data) {
	const response = await fetch(
		"https://api-inference.huggingface.co/models/google/gemma-1.1-2b-it/",
		{
			headers: { 
                "Content-Type": "application/json",
                Authorization: `Bearer ${api_key}` },
			method: "POST",
			body: JSON.stringify(data),
		}
	);
	const result = await response.json();
	return result;
}

async function initmodel() {
	const response = await fetch(
		"https://api-inference.huggingface.co/models/google/gemma-1.1-2b-it/",
		{
			headers: { 
                "Content-Type": "application/json",
                Authorization: `Bearer ${api_key}` },
			method: "POST",
			body: JSON.stringify( {
                  "inputs": '<%-prmpt%>',
                  "wait_for_model": true,
                  "return_full_text": false,
                  "repetition_penalty": 50,
              }),
		}
	);
}

initmodel();

async function postdata(id, chat) {
fetch('http://localhost:3000/users/api/server', {
    method: 'POST',
    headers: {
      'Accept': 'application/json',
      'Content-Type': 'application/json'
    },
    body: JSON.stringify({
      user_id: uid,
      chat_id: id,
      chats: chat.replace(/\n/g,' '),   
    })
  })
  .then(res => res.json())
  .then(data => console.log(data))
  .catch(err => console.log(err));
}


const getChatResponse = async (incomingChatDiv) => {
    const pElement = document.createElement("p");
    await postdata(1,userText.replace("\n"," "));
     try {
            userText = userText.replace(/\n/g,' ');
            userText = userText.replace("***",' ');

            await query(
              {
                  "inputs": userText,
                  "wait_for_model": true,
                  "return_full_text": false,
                  "repetition_penalty": 50,
              }
                        
                        ).then((response) => {
                console.log(JSON.stringify(response));
                  botText = response[0] ['generated_text'];
                pElement.textContent = botText;
                botText = botText.replace(/\n/g,' ');
                botText = botText.replace("***",' ');
                botText = botText.replaceAll("\\",' ');
                botText = botText.replaceAll(/\"/g,' ');
                botText = botText.replaceAll(/\'/g,' ');
                botText = botText.replace(String.fromCharCode(92),String.fromCharCode(92,92));
            });
    
        }
    catch (error) { 
        pElement.classList.add("error");
        botText = "My apologies, I cannot process your request at the moment";
        pElement.textContent = botText;
    }
    await postdata(0,botText.replace("\n"," "));

    incomingChatDiv.querySelector(".typing-animation").remove();
    incomingChatDiv.querySelector(".chat-details").appendChild(pElement);
    localStorage.setItem("all-chats", chatContainer.innerHTML);
    chatContainer.scrollTo(0, chatContainer.scrollHeight);
}

const copyResponse = (copyBtn) => {
    const reponseTextElement = copyBtn.parentElement.querySelector("p");
    navigator.clipboard.writeText(reponseTextElement.textContent);
    copyBtn.textContent = "done";
    setTimeout(() => copyBtn.textContent = "content_copy", 1000);
}

const showTypingAnimation = () => {
    const html = `<div class="chat-content">
                    <div class="chat-details">
                        <img src="/public/assets/images/neuvi_chat_pfp.png" alt="chatbot-img">
                        <div class="typing-animation">
                            <div class="typing-dot" style="--delay: 0.2s"></div>
                            <div class="typing-dot" style="--delay: 0.3s"></div>
                            <div class="typing-dot" style="--delay: 0.4s"></div>
                        </div>
                    </div>
                    <span onclick="copyResponse(this)" class="material-symbols-rounded">content_copy</span>
                </div>`;
    const incomingChatDiv = createChatElement(html, "incoming");
    chatContainer.appendChild(incomingChatDiv);
    chatContainer.scrollTo(0, chatContainer.scrollHeight);
    getChatResponse(incomingChatDiv);
}

const handleOutgoingChat = () => {
    userText = chatInput.value.trim(); 
    if(!userText) return; 
    chatInput.value = "";
    chatInput.style.height = `${initialInputHeight}px`;

    const html = `<div class="chat-content">
                    <div class="chat-details">
                        <p>${userText}</p>
                    </div>
                </div>`;


    const outgoingChatDiv = createChatElement(html, "outgoing");
    chatContainer.querySelector(".default-text")?.remove();
    chatContainer.appendChild(outgoingChatDiv);
    chatContainer.scrollTo(0, chatContainer.scrollHeight);
    setTimeout(showTypingAnimation, 500);
}


const initialInputHeight = chatInput.scrollHeight;

chatInput.addEventListener("input", () => {   
    chatInput.style.height =  `${initialInputHeight}px`;
    chatInput.style.height = `${chatInput.scrollHeight}px`;
});

chatInput.addEventListener("keydown", (e) => {
    if (e.key === "Enter" && !e.shiftKey && window.innerWidth > 800) {
        e.preventDefault();
        handleOutgoingChat();
    }
});

sendButton.addEventListener("click", handleOutgoingChat);
historybtn.addEventListener("click", function() { document.location.href = '/users/chat-history' } );
resetbtn.addEventListener("click", function() { document.location.href = '/users/reset' } );
logoutbtn.addEventListener("click", function() { document.location.href = '/users/logout' } );
</script>
</html>